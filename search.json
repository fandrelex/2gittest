[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Übersicht",
    "section": "",
    "text": "testeintrag\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\nSep 9, 2025\n\n\nFalk\n\n\n\n\n\n\n\n\n\n\n\n\nHowto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\nSep 9, 2025\n\n\nFalk\n\n\n\n\n\n\n\n\n\n\n\n\nGedanken\n\n\n\n\n\n\ngedanken\n\n\n\n\n\n\n\n\n\nSep 19, 2024\n\n\nFalk\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/howto quarto blog/howto quarto blog.html",
    "href": "posts/howto quarto blog/howto quarto blog.html",
    "title": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen",
    "section": "",
    "text": "Ein Blog mit Quarto erstellen das die Daten auf GitHub speichert und dort veröffentlicht.\n\nQuarto ist ein Tool mit dem aus u.a. aus Jupyter Notebooks Dokumente erstellt werden können.\nDokumente wie PDF und auch HTML und Blogs\n\n\n\nauf Quarto die passende Installationsdatei auswählen und installieren.\n\n\n\nSollte Python noch nicht installiert sein, dieses installieren und im Terminal / Powershell folgende Befehle ausführen: - in einem geeigneten Verzeichnis python -m venv meinblog ausführen. - danach Jupyter-Lab installieren pip install jupyterlab mit dem der Blog editiert wird.\n\n\n\nquarto create-project meinblog --type website:blog\nDie Blog Dateien liegen im Unterordner meinblog und sind erst mal .qmd Dateien. Ich werden aber mit Jupyter Notebooks arbeiten. Um einen neuen Blogeintrag zu erstellen wird im Ordner /meinblog/posts/ ein neuer Ordner angelegt und in diesem ein neues Notebook erstellt.\nZum starten des Jupyter-Lab habe ich ein kleines Powershell - Script erstellt, das die Virtuelle Umgebung aktiviert, Jupyterlab startet und die Vorschau des Blog aufruft, damit die Änderungen sofort sichtbar sind:\nStartwin.ps1\n.\\Scripts\\activate\nstart  jupyter-lab\n\nquarto preview myblog_fad\n\n\n\n\nIn Github ein neues Repository erstellen: Auf der Githubseite “NEW”. Der Name entspricht nachher der Adresse des Blog. Z.B. “trashtest” -&gt; https://fandrelex.github.io/trashtest/\npages aktivieren: Im Repositore oben auf “Settings”, links den Eintrag “Pages” suchen, dann rechts auf “Build and deployment” und “Deply´oy from a branch” und den Branch “main” auswählen.\nUnterhalb des oben erstellten Verzeichnisses für die virtuelle Umgebung ein Unterverzeichnis erstellen das nachher die Verbindung zu Github darstellen wird. Z.B. _GitHub_online\nin dieses Verzeichnis wechseln und das Repository clonen mit git clone https://github.com/fandrelex/trashtest.git.\n\n\n\n\nDieser wird benötigt, um die Dateien per script nach Github zu übertragen. Alle Hinweise und Anweisungen durchlesen!\n\nin Github unter dem Account (oben links) auf “Settings” gehen\ndann auf der linken Seite ganz unten “developer Settings”\n“personal access tokens”, “Tokens (classic)”\n“generate new Token” im rechten Fenster nochmal “generate new Token”\nfür den Token eine Beschreibung eingeben\ndie Rchte für den Token setzen -&gt; hier alles von “Repo”\ngewünschtes Verfalldatum eingeben z.B. auf 30 Tage lassen. Wenn dieser Zeitraum abgelaufen ist muss zum übertragen von Änderungen am Blog ein neuer Token erzeugt werden!\nganz unten auf “generate Token”\n“Stellen Sie sicher, dass Sie Ihr persönliches Zugangs-Token jetzt kopieren. Sie werden es nicht mehr sehen können!” also den Token an einem sicheren Ort speichern!\n\n\n\n\nzum testen erstellen wir ein ersten Blogeintrag\n\nin das Verzeichnis wechseln, in dem unter Punkt 3 das Blog Projekt erstellt wurde.\nhier die virtuelle Umgebung starten: ./scirpts/activate\nhier jupyterlab aufrufen\nes öffnet sich ein Browser Fenster mit der Jupyterlab Umgebung. Hier werden die Einträge erstellt bzw. bearbeitet.\nlinks den Dateibereich aktivieren und in das Verzeichnis “meinblog” wechseln.\ndie Blogeinträge befinden sich unter “posts”\nhier erstellen wir ein neues Verzeichnis, z.B. “testeintrag”\nin diesem Verzeichnis erstellen wir eine neue Datei mit “File” -&gt; “new” -&gt; “Notebook”\nals erste cell wird als “Raw” erstellt und bekommt diesen Inhalt:\n\n---\ntitle: \"testeintrag\"  \nauthor: \"Falk\"\ndate: \"21/09/2024\"\ncategories: [code]\nformat: \n  html:\n    code-fold: true\ntoc: true\ntoc-title: \"Inhalt:\"\nhighlight-style: pygments\n---\n\ndarunter wird dann eine neue Cell eingefügt dieses mal als Markdown\nIhnalt ist beliebig, z.B. “Hallo Welt”\nin Jupyterlab unter “File” ein neues “Terminal” Fenster öffnen und in diesem sicherstellen, dass man sich im Verzeichnis oberhalb von “meinblog” befindet und zu starten der Vorschau dieses eingibt\nquarto preview meinblog\ndann öffnet sich ein Browserfenser in dem man den Blog testen kann.\n\n\n\n\nhierfür habe ich eine .cmd Datei erstellt, die den Blog rendert, also aus den Jupyter Notebooks eine Webseite erstelt, die Dateien in ein ansonsten leeres Verzeichnis (hier: _Github_online) kopiert und von da aus dann zu Github transferiert. Zum testen am Anfang kann man diese Befehler nacheinander im Terminal eingeben. Das Script sieht so aus:\nveroeffentlichen.cmd\nquarto render ./myblog_fad/ \n\ncd _GitHub_online\ngit pull origin main\n\nxcopy /S /C /Y C:\\Python\\Daten\\virtal_environments\\quarto_blog2\\myblog_fad\\_site\\* C:\\Python\\Daten\\virtal_environments\\quarto_blog2\\_GitHub_online\\\n\ngit add .\ngit commit -m \"update\"\ngit push https://fandrelex:_XXXX_@github.com/fandrelex/2gittest.git\nFür den Fall, dass die Daten von woanders geändert wurden werden wird zuerst im temporären Verzeichnis “GitHub_online” der aktuellen Zustand von git heruntergeladen. Danach können die Dateien in dieses Verzeichnis kopiert und von dort aus zu Github transferiert werden."
  },
  {
    "objectID": "posts/howto quarto blog/howto quarto blog.html#howto",
    "href": "posts/howto quarto blog/howto quarto blog.html#howto",
    "title": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen",
    "section": "",
    "text": "Ein Blog mit Quarto erstellen das die Daten auf GitHub speichert und dort veröffentlicht.\n\nQuarto ist ein Tool mit dem aus u.a. aus Jupyter Notebooks Dokumente erstellt werden können.\nDokumente wie PDF und auch HTML und Blogs\n\n\n\nauf Quarto die passende Installationsdatei auswählen und installieren.\n\n\n\nSollte Python noch nicht installiert sein, dieses installieren und im Terminal / Powershell folgende Befehle ausführen: - in einem geeigneten Verzeichnis python -m venv meinblog ausführen. - danach Jupyter-Lab installieren pip install jupyterlab mit dem der Blog editiert wird.\n\n\n\nquarto create-project meinblog --type website:blog\nDie Blog Dateien liegen im Unterordner meinblog und sind erst mal .qmd Dateien. Ich werden aber mit Jupyter Notebooks arbeiten. Um einen neuen Blogeintrag zu erstellen wird im Ordner /meinblog/posts/ ein neuer Ordner angelegt und in diesem ein neues Notebook erstellt.\nZum starten des Jupyter-Lab habe ich ein kleines Powershell - Script erstellt, das die Virtuelle Umgebung aktiviert, Jupyterlab startet und die Vorschau des Blog aufruft, damit die Änderungen sofort sichtbar sind:\nStartwin.ps1\n.\\Scripts\\activate\nstart  jupyter-lab\n\nquarto preview myblog_fad\n\n\n\n\nIn Github ein neues Repository erstellen: Auf der Githubseite “NEW”. Der Name entspricht nachher der Adresse des Blog. Z.B. “trashtest” -&gt; https://fandrelex.github.io/trashtest/\npages aktivieren: Im Repositore oben auf “Settings”, links den Eintrag “Pages” suchen, dann rechts auf “Build and deployment” und “Deply´oy from a branch” und den Branch “main” auswählen.\nUnterhalb des oben erstellten Verzeichnisses für die virtuelle Umgebung ein Unterverzeichnis erstellen das nachher die Verbindung zu Github darstellen wird. Z.B. _GitHub_online\nin dieses Verzeichnis wechseln und das Repository clonen mit git clone https://github.com/fandrelex/trashtest.git.\n\n\n\n\nDieser wird benötigt, um die Dateien per script nach Github zu übertragen. Alle Hinweise und Anweisungen durchlesen!\n\nin Github unter dem Account (oben links) auf “Settings” gehen\ndann auf der linken Seite ganz unten “developer Settings”\n“personal access tokens”, “Tokens (classic)”\n“generate new Token” im rechten Fenster nochmal “generate new Token”\nfür den Token eine Beschreibung eingeben\ndie Rchte für den Token setzen -&gt; hier alles von “Repo”\ngewünschtes Verfalldatum eingeben z.B. auf 30 Tage lassen. Wenn dieser Zeitraum abgelaufen ist muss zum übertragen von Änderungen am Blog ein neuer Token erzeugt werden!\nganz unten auf “generate Token”\n“Stellen Sie sicher, dass Sie Ihr persönliches Zugangs-Token jetzt kopieren. Sie werden es nicht mehr sehen können!” also den Token an einem sicheren Ort speichern!\n\n\n\n\nzum testen erstellen wir ein ersten Blogeintrag\n\nin das Verzeichnis wechseln, in dem unter Punkt 3 das Blog Projekt erstellt wurde.\nhier die virtuelle Umgebung starten: ./scirpts/activate\nhier jupyterlab aufrufen\nes öffnet sich ein Browser Fenster mit der Jupyterlab Umgebung. Hier werden die Einträge erstellt bzw. bearbeitet.\nlinks den Dateibereich aktivieren und in das Verzeichnis “meinblog” wechseln.\ndie Blogeinträge befinden sich unter “posts”\nhier erstellen wir ein neues Verzeichnis, z.B. “testeintrag”\nin diesem Verzeichnis erstellen wir eine neue Datei mit “File” -&gt; “new” -&gt; “Notebook”\nals erste cell wird als “Raw” erstellt und bekommt diesen Inhalt:\n\n---\ntitle: \"testeintrag\"  \nauthor: \"Falk\"\ndate: \"21/09/2024\"\ncategories: [code]\nformat: \n  html:\n    code-fold: true\ntoc: true\ntoc-title: \"Inhalt:\"\nhighlight-style: pygments\n---\n\ndarunter wird dann eine neue Cell eingefügt dieses mal als Markdown\nIhnalt ist beliebig, z.B. “Hallo Welt”\nin Jupyterlab unter “File” ein neues “Terminal” Fenster öffnen und in diesem sicherstellen, dass man sich im Verzeichnis oberhalb von “meinblog” befindet und zu starten der Vorschau dieses eingibt\nquarto preview meinblog\ndann öffnet sich ein Browserfenser in dem man den Blog testen kann.\n\n\n\n\nhierfür habe ich eine .cmd Datei erstellt, die den Blog rendert, also aus den Jupyter Notebooks eine Webseite erstelt, die Dateien in ein ansonsten leeres Verzeichnis (hier: _Github_online) kopiert und von da aus dann zu Github transferiert. Zum testen am Anfang kann man diese Befehler nacheinander im Terminal eingeben. Das Script sieht so aus:\nveroeffentlichen.cmd\nquarto render ./myblog_fad/ \n\ncd _GitHub_online\ngit pull origin main\n\nxcopy /S /C /Y C:\\Python\\Daten\\virtal_environments\\quarto_blog2\\myblog_fad\\_site\\* C:\\Python\\Daten\\virtal_environments\\quarto_blog2\\_GitHub_online\\\n\ngit add .\ngit commit -m \"update\"\ngit push https://fandrelex:_XXXX_@github.com/fandrelex/2gittest.git\nFür den Fall, dass die Daten von woanders geändert wurden werden wird zuerst im temporären Verzeichnis “GitHub_online” der aktuellen Zustand von git heruntergeladen. Danach können die Dateien in dieses Verzeichnis kopiert und von dort aus zu Github transferiert werden."
  },
  {
    "objectID": "posts/howto quarto blog/howto quarto blog.html#todo",
    "href": "posts/howto quarto blog/howto quarto blog.html#todo",
    "title": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen",
    "section": "Todo:",
    "text": "Todo:\n\ninstallation von quarto (Betriebssystem nicht Python)\ninstallation von … keine Ahnung was kam da noch so? Eigentlich nur noch dei Virtuelle Umgebung erstellen mit python -m venv quarto-bog\nerzeugen eines Repos in Github\nerzeugen des “schlüssels” in Github\naktivieren des lokalen caches für den Schlüssel - wasn das?\nerstellen einer Seite\nveröffentlichen. Am besten mit einem Script, das alle schritte automatisch durchführt\n[ ]"
  },
  {
    "objectID": "posts/howto quarto blog/howto quarto blog.html#dieses-howto-basiert-auf-der-online-dokuemntation-von-quarto",
    "href": "posts/howto quarto blog/howto quarto blog.html#dieses-howto-basiert-auf-der-online-dokuemntation-von-quarto",
    "title": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen",
    "section": "Dieses Howto basiert auf der Online Dokuemntation von Quarto:",
    "text": "Dieses Howto basiert auf der Online Dokuemntation von Quarto:\nCreating a Blog"
  },
  {
    "objectID": "posts/testeintrag/testeintrag.html",
    "href": "posts/testeintrag/testeintrag.html",
    "title": "testeintrag",
    "section": "",
    "text": "hallo welt"
  },
  {
    "objectID": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html",
    "href": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html",
    "title": "Gedanken",
    "section": "",
    "text": "worüber will ich überhaupt schreiben?\n\nInformatik\n\nhier könnte ich mir Anleitungen für Projekte vorstellen um diese zumindest für mich immer zugänglich zu machen.\nUnter Umständen zweisprachig. Kann quarto Mehrsprachigkeit?\n\nAnleitungen für z.B. Nextcloud auf RasPi (deutsch)\n\nFastAI kompilat auf deutsch\n\n\nallgemeines\nerster Post könnte das erstellen eins Blogs auf GitHub mittels Quarto und Jupyter\n\nwie soll es aussehen?\n\ndas Aussehen vom ersten Versuch nochmal genauer anschauen.\ndas gefällt mir gut und ist dunkel\nhier auch noch die Kommentarfunktion abkupfern!\n\n\n\n\n\ndie Datei- und Verzeichnisnamen sind für die Anzeige egal, wichtig ist nur was im Kopf als Titel angegeben ist.\n\n\n\n\n\nfür einen Zeilenumbruch am Ende zwei Leerzeichen setzen\ngenerell zwischen Elementen eine Leerzeile setzen\n\n\n\n\n\n\nerstens\nzweitens\ndrittens\n\n\nund eine Tabelle:\n\n\n\neins\nzwei\n\n\n\n\neitrag1\neintrag2\n\n\n\n\n\n\n\\[ f(x)= \\frac{1}{2} x^2 \\]"
  },
  {
    "objectID": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#erkenntnisse",
    "href": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#erkenntnisse",
    "title": "Gedanken",
    "section": "",
    "text": "die Datei- und Verzeichnisnamen sind für die Anzeige egal, wichtig ist nur was im Kopf als Titel angegeben ist."
  },
  {
    "objectID": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#hier-nochmal-ein-paar-markdown-tipps",
    "href": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#hier-nochmal-ein-paar-markdown-tipps",
    "title": "Gedanken",
    "section": "",
    "text": "für einen Zeilenumbruch am Ende zwei Leerzeichen setzen\ngenerell zwischen Elementen eine Leerzeile setzen"
  },
  {
    "objectID": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#hier-eine-erste-liste",
    "href": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#hier-eine-erste-liste",
    "title": "Gedanken",
    "section": "",
    "text": "erstens\nzweitens\ndrittens\n\n\nund eine Tabelle:\n\n\n\neins\nzwei\n\n\n\n\neitrag1\neintrag2"
  },
  {
    "objectID": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#eine-berechnung",
    "href": "posts/Gedanken und Spielwiese/Gedanken und Spielwiese.html#eine-berechnung",
    "title": "Gedanken",
    "section": "",
    "text": "\\[ f(x)= \\frac{1}{2} x^2 \\]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hallo ich bin Falk.\nIch interessiere mich unter anderem für Informatik."
  }
]